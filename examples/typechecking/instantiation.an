
add m n = fn f -> fn x -> m f (n f x)  // (a -> b -> c) -> (a -> d -> b) -> a -> d -> c

one f x = f x  // (a -> b) -> a -> b
two1 f x = f (f x) // (a -> a) -> a -> a

two2 = add one one

// id is polymorphic, expect no error here
id 3
id "four"

id x = x

// args: --check --show-types
// expected stdout:
// add : forall a b c d e f g. ((a - c => f can e) - (a - b => c can e) -> a => b => f can e pure pure)
// id : forall a. (a -> a pure)
// one : forall a b c d. ((a => c can b) - a -> c can b)
// two1 : forall a b c. ((c => c can b) - c -> c can b)
// two2 : (a => a can c) => a => a can c pure
