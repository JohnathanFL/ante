// Regression for #215
effect Emit a with
    emit: a -> Unit

iota (n: U32) = loop (i = 0) ->
    if i < n then
        emit i
        recur (i + 1)

filter stream predicate =
    handle stream ()
    | emit x ->
        if predicate x then
            emit x
        resume ()

for stream f =
    handle stream ()
    | emit x ->
        f x
        resume ()

iota 10
    with filter (fn x -> x % 2 == 0)
    with for print

// args: --check --show-types
// expected stdout:
// emit : forall a. (a -> Unit can Emit a)
// filter : forall a b c d e. ((Unit => a can Emit d, e) - (d => Bool can Emit d, e) -> a can Emit d, e)
// for : forall a b c d e f. ((Unit => a can Emit c, f) - (c => d can f) -> a can f)
// iota : U32 -> Unit can Emit U32
