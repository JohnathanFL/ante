
trait Functor f with
    map: f a - (a -> b) -> f b

trait Monad m with
    wrap: a -> m a
    bind: m a - (a -> m b) -> m b


impl Functor Maybe with
    map m f =
        match m
        | Some x -> Some (f x)
        | None -> None

impl Monad Maybe with
    wrap a = Some a
    
    bind m f =
        match m
        | Some x -> f x
        | None -> None

// args: --check --show-types
// expected stdout:
// bind : forall a b c d. (a c - (c -> a d can b) -> a d can b)
//   given Monad a
// map : forall a b c d. (a c - (c -> d can b) -> a d can b)
//   given Functor a
// wrap : forall a b. (b -> a b pure)
//   given Monad a
